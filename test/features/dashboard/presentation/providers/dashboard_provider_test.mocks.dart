// Mocks generated by Mockito 5.3.2 from annotations
// in mi_learning/test/features/dashboard/presentation/providers/dashboard_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mi_learning/app/common/domain/entity/course_entities/course.dart'
    as _i6;
import 'package:mi_learning/app/dashboard/domain/usecases/get_basic_user_info_use_case.dart'
    as _i9;
import 'package:mi_learning/app/dashboard/domain/usecases/get_my_courses_use_case.dart'
    as _i3;
import 'package:mi_learning/app/dashboard/domain/usecases/get_recommended_courses_use_case.dart'
    as _i8;
import 'package:mi_learning/app/user/domain/entities/basic_user_info.dart'
    as _i10;
import 'package:mi_learning/base/domain/usecase/params.dart' as _i7;
import 'package:mi_learning/base/failure.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetMyCoursesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMyCoursesUseCase extends _i1.Mock
    implements _i3.GetMyCoursesUseCase {
  MockGetMyCoursesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Course>>> call(
          _i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Course>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Course>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Course>>>);
}

/// A class which mocks [GetRecommendedCourseUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRecommendedCourseUseCase extends _i1.Mock
    implements _i8.GetRecommendedCourseUseCase {
  MockGetRecommendedCourseUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Course>>> call(
          _i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Course>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Course>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Course>>>);
}

/// A class which mocks [GetBasicUserInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBasicUserInfoUseCase extends _i1.Mock
    implements _i9.GetBasicUserInfoUseCase {
  MockGetBasicUserInfoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.BasicUserInfo>> call(
          _i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i10.BasicUserInfo>>.value(
                _FakeEither_0<_i5.Failure, _i10.BasicUserInfo>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i10.BasicUserInfo>>);
}
