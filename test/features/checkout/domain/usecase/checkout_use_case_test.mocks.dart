// Mocks generated by Mockito 5.3.2 from annotations
// in mi_learning/test/features/checkout/domain/usecase/checkout_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mi_learning/app/common/domain/entity/course_entities/course.dart'
    as _i6;
import 'package:mi_learning/app/common/domain/entity/course_entities/rating.dart'
    as _i8;
import 'package:mi_learning/app/course_detail/domain/repositories/course_detail_repository.dart'
    as _i3;
import 'package:mi_learning/app/course_detail/domain/usecases/submit_review_use_case.dart'
    as _i9;
import 'package:mi_learning/app/course_detail/domain/usecases/toggle_save_course_use_case.dart'
    as _i7;
import 'package:mi_learning/base/failure.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CourseDetailRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourseDetailRepository extends _i1.Mock
    implements _i3.CourseDetailRepository {
  MockCourseDetailRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Course>> getCourseDetail(
          String? courseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourseDetail,
          [courseId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Course>>.value(
            _FakeEither_0<_i5.Failure, _i6.Course>(
          this,
          Invocation.method(
            #getCourseDetail,
            [courseId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Course>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> toggleSaveCourse(
          _i7.ToggleSaveCourseParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleSaveCourse,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #toggleSaveCourse,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Course>>> getSavedCourse() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedCourse,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Course>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Course>>(
          this,
          Invocation.method(
            #getSavedCourse,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Course>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> checkout(String? courseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkout,
          [courseId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #checkout,
            [courseId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.Rating>> createRating(
          _i9.SubmitReviewParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRating,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.Rating>>.value(
            _FakeEither_0<_i5.Failure, _i8.Rating>(
          this,
          Invocation.method(
            #createRating,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.Rating>>);
}
